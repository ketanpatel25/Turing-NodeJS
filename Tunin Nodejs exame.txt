

TURING
IS
NodeJS

Question.
Which of the following is not the correct statement about the cluster module?

A.  Child processes in the cluster can communicate with the parent via IPC.

B.  The cluster module allows easy creation of child processes that all share server ports.

C. Workers in clusters are all separate processes, they can be killed or re-spawned depending on a program's needs, without affecting other workers.

D. A cluster an instance represents the smallest logical amount of disk space that can be allocated to hold a file.

E. Clusters in Node.js processes can be used to run multiple instances of Node.js that can distribute workloads among their application threads.
     Required. Select at least one.

answer is D
﻿----------------------------------------------------------------------------------------------------------------------------------------------
Question 
Which of the following is not true about libuv in NodeJS?

A. libuv is a C library that is used to abstract non-blocking I/O operations to a consistent interface across all supported platforms.

B. None of the options are correct.

C. libuv enforces an asynchronous, event-driven style of programming.

D. A default loop is provided by libuv and can be accessed using uv_default_loop().

E. It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming.

answer is B.
﻿------------------------------------------------------------------------------------------------------------------------------------------------

Which of the following is correct about the below program?

let EventEmitter = require("events");

let event = new EventEmitter();

event.on("event1", function () { 
	console.log("Event1 fired!");
	setTimeout(function () {
	     event.emit("event2");
	}, 1000);
});

event.on("event2", function () {
      console.log("Event2 fired!");
      setTimeout(function () {
           event.emit ("event1");
      },500);
});

event.on("event3", function () { 
        console.log("Event3 fired!");
        process.nextTick(function () {
            event.emit ("event1");
     });
});
event.emit("event3");


A.  The program will print Event3 fired! once and then print â☐☐Event1 fired! Event2 fired!â☐☐ an infinite number of times.

B. There is a compile-time error in the program.

C. The program will print â☐☐Event1 fired! Event2 fired! Event3 fired!â☐☐ in sequence an infinite number of times.

D. The program will print âEvent1 fired! Event2 fired! Event3 fired!â☐☐ only once.

E. The program will print âEvent3 fired! Event2 fired!â only once and then print â☐☐Event1 fired!â☐☐ an infinite number of times at a time interval of 1000 milliseconds.

answer is A.
﻿------------------------------------------------------------------------------------------------------------------------------------------------

Question 9 of 28

You need to use the 'fs module to read a big file account.csv (around ~ 400Mb) with minimum memory. Which of the following is the best way to do this?

A.  fs.readFile('./account.csv', (err, data) => {
          if (err) throw err; 
           res.end(data);
      });

B.  const src = fs.createReadStream('account.csv');  
      src.pipe(res);

C. None of the options are correct

D.  All of the options are correct

E.   var data = await fs.readFileSync('account.csv')

answer is B.
﻿------------------------------------------------------------------------------------------------------------------------------------------------

NodeJS
Question 12 of 28

You need to replace ?? with the correct header value in the following to should be able to send the cookie back to the browser.

var http = require("http");
var url = require("url");
var server = http
	.createServer (function (request, response) {
     	   var cookies = request.headers.cookie;
	   if (!cookies) {
 		var cookieName = "session";
		var cookieValue = "123456";
		var expiryDate = new Date();
		expiryDate.setDate(expiry Date.getDate() + 1);
		var cookieText =
			cookieName +
 			"=" +
			cookieValue +
			"; expires=" +
			expiryDate.toUTCString() +
			";";
		response.setHeader("??", cookieText);
     		response.writeHead (302, {
		            Location: "/",
                                         });
           		return response.end();
		}
	        cookies.split(";").forEach(function (cookie) {
		var m = cookie.match(/(.*?)=(.*)$/);
		cookies [m[1].trim()] = (m[2] || "").trim();
                             });
	response.end("Cookie set: " + cookies.toString());
                })
        .listen(8080);


A.  The ?? in the code should be replaced with Set-Cookie

B.   None of the above.

C.   The ?? in the code should be replaced with Allow-Cookie

D.  The ?? in the code should be replaced with SetCookie

E.   The ?? in the code should be replaced with Cookie


answer is A.
﻿------------------------------------------------------------------------------------------------------------------------------------------------

Question 13 of 28

Which of the following is the most correct for the following code block provided that a.txt, b.txt, and c.txt are text files ranging from 1MB to 3MB?

const fs = require("fs").promises;

const printFiles  =  async () => {
	const fileNames = ["a.txt", "b.txt", "c.txt"];

  	fileNames.forEach (async (fileName) => {
	       let contents = await fs.readFile(fileName, "utf8");
	       console.log("\n\n ${fileName} \n\n`);
	       console.log(contents.toString());
	});
}
printFiles();


A.  The code block will print the contents of the file in the sequence i.e it will print the contents of a.txt followed by b.txt and then c.txt.

B.  The code block will not print the contents of the file in the sequence. However, we can modify the printFiles() as follows to make it read and print in sequence.

	const printFiles = async () => {
		const fileNames = ["a.txt", "b.txt", "c.txt"];
	
		for (const fileName of fileNames) {
		    let contents = await fs.readFile(fileName, "utf8"); 
		   console.log("\n\n ${fileName} \n\n`);
		   console.log(contents.toString());
	                    }
	  };

C.  The code block will throw a compile time exception since the fs module does not support async await and works with callbacks only.

D. It will print the contents of the file in the sequence. However, we can modify the printFiles()
as follows to read in parallel to improve the performance as well as print in sequence.

	const printFiles = async () => {
	const fileNames = ["a.txt", "b.txt", "c.txt"];
	await Promise.all(
	     fileNames.map(async (fileName) => {
	  	let contents = await fs.readFile(fileName, "utf8"); 
                 		console.log("\n\n ${fileName} \n\n`);
                  		console.log(contents.toString());
 	     }
	});

E. 

answer is B.
﻿------------------------------------------------------------------------------------------------------------------------------------------------

Question 14 of 28

Which one of the following is the most accurate about the following code block when the `node index.js command is executed?

logger.js
   
   var events = require("events");
   var Logger = new events.EventEmitter();
       Logger.writeLog = (message) => {
             console.log(message);
             Logger.emit ("error", "Error occurred");
       }; 

  module.exports = Logger;


index.js

    var Logger = require("./logger.js");
          for (var i = 0; i < 11; i++) {
              Logger.on("error", function (err) {
                     console.log("error writing log: " + err);
             });
           Logger.writeLog("Hello");
       }


A. Thereâ□□s no issue with the code, it will print â☐☐Helloâ and the â☐☐error writing log: Error occurredâ☐☐ 11 times.

B. The code has a memory leak. The solution to this is to use emitter.setMaxListeners(100) to increase the limit of event listeners allowed in a NodeJS instance.

C. The code will fail with a compile-time error.

D. None of the options are correct.

E. The code has a memory leak. Logger.on(â☐☐ errorâ) should be moved out of the loop to prevent the leak.


answer is E.
﻿------------------------------------------------------------------------------------------------------------------------------------------------






